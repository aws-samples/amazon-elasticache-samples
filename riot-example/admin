#!/bin/bash

# This script may be helpful to compare two different
# clusters.

# WARNING: If you run the 'flush' command with this tool,
# it will flush all keys from all primary nodes in the
# specified cluster (source or target).

if [[ ! -f './env.sh' ]]; then
    echo "File 'env.sh' not found, exiting"
    exit 1
fi

source env.sh

run_command() {
    # Normalize the ADMIN_DEBUG value
    local debug_mode=${ADMIN_DEBUG,,} # Convert to lowercase for consistency

    # Construct the command as a single string
    local cmd="$*"

    # Print the command to stderr if debugging is enabled
    if [[ $debug_mode == "yes" || $debug_mode == "true" ]]; then
        echo "Running: $cmd" >&2
    fi

    # Execute the command and return its output
    eval "$cmd"
}

set_cluster() {
    if [[ ${CLUSTER} == "source" ]]; then
        export ACTIVE_CLUSTER=${RIOT_SOURCE}
        export ACTIVE_PORT=${SOURCE_PORT}
    else
        export ACTIVE_CLUSTER=${RIOT_TARGET}
        export ACTIVE_PORT=${TARGET_PORT}
    fi
}

set_creds() {
    if [[ ${CLUSTER} == "source" ]]; then
        export AUTH_STRING="${SOURCE_AUTH_STRING}"
        export TLS_FLAG="${SOURCE_TLS}"
    fi
    if [[ ${CLUSTER} == "target" ]]; then
	export AUTH_STRING="${TARGET_AUTH_STRING}"
        export TLS_FLAG="${TARGET_TLS}"
    fi
}

commify() {
    number=$1
    run_command echo $number | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'
}

bgsave () {
    while IFS= read -r -t 5 node_name
    do
        echo -n "Executing BGSAVE on ${node_name}..."
        set -o pipefail
        run_command ${CLI} --raw --no-auth-warning -h $node_name -p ${ACTIVE_PORT} ${AUTH_STRING} ${TLS_FLAG} BGSAVE
    done < <(get_primaries)
}

get_dups() {
    files=""
    while IFS= read -r -t 5 node_name
    do
        echo "Fetching keys from $node_name..."
        set -o pipefail
        run_command ${CLI} --raw --no-auth-warning -h $node_name -p ${ACTIVE_PORT} ${AUTH_STRING} ${TLS_FLAG} KEYS \*  > /tmp/$node_name.keys
        files+=" /tmp/$node_name.keys "
    done < <(get_primaries)
    dup_keys=$(cat  $files | sort | uniq -d)
    if [[ -z "$dup_keys" ]]; then
        echo No duplicates
    else
        echo "Duplicates:"
        echo "$dup_keys"
    fi
    rm $files
}

flush () {
    while IFS= read -r -t 5 node_name
    do
        echo -n "Flushing ${node_name}..."
        set -o pipefail
        run_command ${CLI} --raw --no-auth-warning -h $node_name -p ${ACTIVE_PORT} ${AUTH_STRING} ${TLS_FLAG} flushall
    done < <(get_primaries)
}

parse_mb () {
    line=$1
    value=$(echo "$line" | /usr/bin/grep -oE '^[0-9.]+')
    unit=$(echo "$line" | /usr/bin/grep -oE '[MG]')

    if [[ -z "$value" || -z "$unit" ]]; then
        echo "Unknown format in line: $line" >&2 
    fi

    # Convert to MB
    if [[ "$unit" == "G" ]]; then
        # Convert GB to MB
        value_in_mb=$(echo "$value * 1024" | bc -l)
    elif [[ "$unit" == "M" ]]; then
        value_in_mb="$value"
    else
        echo "Unknown unit in line: $line" >&2
    fi

    echo $value_in_mb
}

memory () {
    total_mb=0
    while IFS= read -r node_name
    do
        set -o pipefail
	node_mb=$(run_command ${CLI} \
            --raw \
	    --no-auth-warning \
	    -h $node_name \
	    -p ${ACTIVE_PORT} \
	    ${AUTH_STRING} \
	    ${TLS_FLAG} INFO MEMORY \
	    | grep -i used_memory_human \
	    | cut -d':' -f2)
        numeric_mb=$(parse_mb $node_mb)
        integer_part=${numeric_mb%.*}
        numeric_mb=${integer_part}
        with_comma=$(LC_NUMERIC="en_US.UTF-8" printf "%'d\n" "$numeric_mb")
        echo "$node_name : $with_comma MB"
        if [[ -z $total_mb ]]; then
            total_mb=0
        fi
        total_mb=$(echo "$total_mb + $numeric_mb" | bc -l)
    done < <(get_primaries)

    print_mb=$(commify $total_mb)
    echo "Total : $print_mb MB"
}

keys() {
    total_keys=0
    while IFS= read -r node_name
    do
        num_keys=$(run_command ${CLI} --no-auth-warning --raw -h $node_name -p ${ACTIVE_PORT} ${AUTH_STRING} ${TLS_FLAG} dbsize)
	export dbsize=$(run_command commify $num_keys)
        echo "$node_name : $dbsize"
        if [[ -z $num_keys ]]; then
            total_keys=0
        fi
        total_keys=$(run_command echo "$total_keys + $num_keys" | bc -l)
    done < <(get_primaries)
    comma_keys=$(run_command commify $total_keys)
    echo "Total: $comma_keys"
}

usage() {
    echo
    echo "Usage: $0 [source|target] [bgsave|dups|flush|keys|memory|primaries|replicas]"
    echo
    echo "  [source|target] which cluster to target for this operation"
    echo
    echo "  bgsave - Start a background save on all self-managed primary nodes"
    echo "  keys - list key count for each primary node"
    echo "  memory - list memory used for each primary node"
    echo "  primaries - list all primary nodes"
    echo "  replicas - list all replica nodes"
    echo "  dups - list any duplicate keys in cluster"
    echo "  flush - delete all keys from each primary node"
    echo
}

get_primaries() {
    set -o pipefail
    run_command ${CLI} --no-auth-warning -u ${ACTIVE_CLUSTER} CLUSTER NODES \
        | grep master \
        | cut -d' ' -f2 \
        | cut -d':' -f1
}

get_replicas() {
    set -o pipefail
    run_command ${CLI} --no-auth-warning -u ${ACTIVE_CLUSTER} CLUSTER NODES \
        | grep slave \
        | cut -d' ' -f2 \
        | cut -d':' -f1
}

### BEGIN ACTUAL SHELL SCRIPT LOGIC

CLUSTER=$1
FUNCTION=$2

if [[ -z "$1" || -z "$2" ]]; then
    usage
    exit 1
fi

CLUSTER=${CLUSTER,,}

if [ ${CLUSTER} != "source" ] && [ ${CLUSTER} != "target" ]; then
    usage
    exit 1
fi

set_cluster
set_creds

case "$FUNCTION" in
    bgsave)
        bgsave
    ;;
    primaries)
        get_primaries
    ;;
    replicas)
        get_replicas
    ;;
    dups)
        get_dups
    ;;
    flush)
        flush
    ;;
    keys)
        keys
    ;;
    memory)
        memory
        ;;
    *)
        echo "Error: Invalid function '$FUNCTION'."
        usage
        exit 1
        ;;
esac

exit 0
